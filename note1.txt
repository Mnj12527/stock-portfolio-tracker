portfolio.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>My Portfolio</title>
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="/portfolio.css">
</head>
<body>

    <div class="navbar">
        <div class="logo"><span>Prasham</span>finance</div>

        <div class="search-bar">
            <input type="text" placeholder="Search for news, symbols or company..." style="background-color: white; color: black;">
            <button>üîç</button>
        </div>

        <div class="nav-links">
            <a onclick="loadPage('myportfolio.html')">Portfolio</a>
            <a onclick="loadPage('News.html')">News</a>
            <a onclick="loadPage('Markets.html')">Markets</a>
            <a onclick="loadPage('Research.html')">Research</a>
            <a onclick="loadPage('Finance.html')">Personal Finance</a>
            <a onclick="loadPage('Videos.html')">Videos</a>
            <a class="signout-btn" onclick="signOut()">üö™ Sign Out</a>
        </div>
    </div>

    <div id="content" class="content-below-navbar">
        </div>

    <script>
        let watchlists = [[], [], []]; // Initialize an empty watchlist array for the current user
        let currentWatchlist = 0;
        let authToken = localStorage.getItem('token'); // Get the token

        // Load inner pages dynamically
        function loadPage(page) {
            fetch(page)
                .then(res => {
                    if (!res.ok) throw new Error("Page not found");
                    return res.text();
                })
                .then(html => {
                    document.getElementById("content").innerHTML = html;
                    attachWatchlistListeners(); // Attach listeners after loading
                    // renderWatchlist(); // Render will be called after fetching
                    // highlightActiveButton(currentWatchlist); // Highlight after fetching
                    window.scrollTo({ top: 0, behavior: "smooth" });
                })
                .catch(() => {
                    document.getElementById("content").innerHTML = "<p>Error loading page.</p>";
                });
        }

        function signOut() {
            localStorage.removeItem("token");
            alert("You have been signed out.");
            // **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§¨‡§¶‡§≤:** ‡§∏‡§æ‡§á‡§® ‡§Ü‡§â‡§ü ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§≤‡•ã‡§ï‡§≤ ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§æ
            watchlists = [[], [], []];
            renderWatchlist();
            window.location.href = "index.html";
        }

        function switchWatchlist(index) {
            currentWatchlist = index;
            renderWatchlist();
            highlightActiveButton(index);
        }

        function addStock() {
            const input = document.getElementById("stockInput");
            const symbol = input.value.trim().toUpperCase();
            if (symbol && !watchlists[currentWatchlist].includes(symbol)) {
                watchlists[currentWatchlist].push(symbol);
                renderWatchlist();
                saveWatchlistsToServer(); // Save to the server
            }
            input.value = "";
        }

        function renderWatchlist() {
            const list = document.getElementById("watchlistDisplay");
            list.innerHTML = "";
            if (watchlists[currentWatchlist].length === 0) {
                list.innerHTML = "<p>No stocks in this watchlist.</p>";
            } else {
                watchlists[currentWatchlist].forEach((stock, index) => {
                    const li = document.createElement("li");
                    const stockName = document.createElement("span");
                    stockName.textContent = stock;
                    const removeBtn = document.createElement("button");
                    removeBtn.textContent = "‚àí";
                    removeBtn.onclick = () => {
                        watchlists[currentWatchlist].splice(index, 1);
                        renderWatchlist();
                        saveWatchlistsToServer(); // Save to the server
                    };
                    li.appendChild(stockName);
                    li.appendChild(removeBtn);
                    list.appendChild(li);
                });
            }
        }

        function highlightActiveButton(index) {
            document.querySelectorAll(".watchlist-tabs button").forEach((btn, i) => {
                btn.style.backgroundColor = i === index ? "#333" : "#6f2cff";
            });
        }

        function attachWatchlistListeners() {
            const watchlistTabs = document.querySelectorAll(".watchlist-tabs button");
            const addButton = document.querySelector(".watchlist-container button");
            const stockInput = document.getElementById("stockInput");
            const watchlistDisplay = document.getElementById("watchlistDisplay");

            watchlistTabs.forEach((button, index) => {
                button.onclick = () => switchWatchlist(index);
            });

            if (addButton) {
                addButton.onclick = addStock;
            }

            // Event delegation for dynamically added remove buttons
            watchlistDisplay.addEventListener('click', function(event) {
                if (event.target && event.target.tagName === 'BUTTON' && event.target.textContent === '‚àí') {
                    const listItem = event.target.parentNode;
                    const indexToRemove = Array.from(listItem.parentNode.children).indexOf(listItem);
                    watchlists[currentWatchlist].splice(indexToRemove, 1);
                    renderWatchlist();
                    saveWatchlistsToServer();
                }
            });
        }

        // Function to fetch watchlists from the server
        async function fetchWatchlistsFromServer() {
            if (!authToken) {
                console.log("No token found, cannot fetch watchlists.");
                // **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§¨‡§¶‡§≤:** ‡§ü‡•ã‡§ï‡§® ‡§®‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§≤‡•ã‡§ï‡§≤ ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§æ
                watchlists = [[], [], []];
                renderWatchlist();
                highlightActiveButton(0);
                return;
            }

            try {
                const response = await fetch('http://localhost:5000/watchlists', {
                    headers: {
                        'Authorization': `Bearer ${authToken}`,
                    },
                });

                if (!response.ok) {
                    const error = await response.json();
                    console.error("Failed to fetch watchlists:", error.message);
                    // **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§¨‡§¶‡§≤:** ‡§è‡§∞‡§∞ ‡§Ü‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§≤‡•ã‡§ï‡§≤ ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§æ
                    watchlists = [[], [], []];
                    renderWatchlist();
                    highlightActiveButton(0);
                    return;
                }

                const data = await response.json();
                watchlists = data.watchlists; // Assign the fetched watchlist to the global array
                renderWatchlist(); // Render the fetched watchlist
                highlightActiveButton(currentWatchlist); // Highlight the default tab
            } catch (error) {
                console.error("Error fetching watchlists:", error);
                // **‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§¨‡§¶‡§≤:** ‡§ï‡•Ö‡§ö ‡§¨‡•ç‡§≤‡•â‡§ï ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§≤‡•ã‡§ï‡§≤ ‡§µ‡•â‡§ö‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§æ
                watchlists = [[], [], []];
                renderWatchlist();
                highlightActiveButton(0);
            }
        }

        // Function to save watchlists to the server
        async function saveWatchlistsToServer() {
            if (!authToken) {
                console.log("No token found, cannot save watchlists.");
                return;
            }

            try {
                const response = await fetch('http://localhost:5000/watchlists', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`,
                    },
                    body: JSON.stringify({ watchlists }),
                });

                if (!response.ok) {
                    const error = await response.json();
                    console.error("Failed to save watchlists:", error.message);
                } else {
                    console.log("Watchlists saved successfully.");
                }
            } catch (error) {
                console.error("Error saving watchlists:", error);
            }
        }

        // Load myportfolio.html by default and fetch watchlists
        document.addEventListener("DOMContentLoaded", () => {
            loadPage('myportfolio.html');
            fetchWatchlistsFromServer(); // Fetch watchlists on page load
        });

    </script>

</body>
</html>


////////////////////////////////////


myportfolio.html
<div class="watchlist-container">
    <h3>üìà Watchlists</h3>
    <div class="watchlist-tabs">
        <button onclick="switchWatchlist(0)">Watchlist 1</button>
        <button onclick="switchWatchlist(1)">Watchlist 2</button>
        <button onclick="switchWatchlist(2)">Watchlist 3</button>
    </div>
    <input type="text" id="stockInput" placeholder="Add stock symbol" />
    <button onclick="addStock()">‚ûï Add</button>
    <ul id="watchlistDisplay"></ul>
</div>